// Autogenerated from Pigeon (v13.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';
List<Object?> wrapResponse({Object? result, PlatformException? error, bool empty = false}) {
  if (empty) {
    return <Object?>[];
  }
  if (error == null) {
    return <Object?>[result];
  }
  return <Object?>[error.code, error.message, error.details];
}

enum Code {
  one,
  two,
}

enum TikTokLoginStatus {
  success,
  cancelled,
  error,
}

/// https://developers.tiktok.com/doc/tiktok-api-scopes/
enum TikTokPermissionType {
  researchAdlibBasic,
}

class MessageData {
  MessageData({
    this.name,
    this.description,
    required this.code,
    required this.data,
  });

  String? name;

  String? description;

  Code code;

  Map<String?, String?> data;

  Object encode() {
    return <Object?>[
      name,
      description,
      code.index,
      data,
    ];
  }

  static MessageData decode(Object result) {
    result as List<Object?>;
    return MessageData(
      name: result[0] as String?,
      description: result[1] as String?,
      code: Code.values[result[2]! as int],
      data: (result[3] as Map<Object?, Object?>?)!.cast<String?, String?>(),
    );
  }
}

class Permission {
  Permission({
    required this.name,
  });

  String name;

  Object encode() {
    return <Object?>[
      name,
    ];
  }

  static Permission decode(Object result) {
    result as List<Object?>;
    return Permission(
      name: result[0]! as String,
    );
  }
}

class TikTokLoginResult {
  TikTokLoginResult({
    required this.status,
    this.authCode,
    this.state,
    this.codeVerifier,
    required this.grantedPermissions,
    this.errorCode,
    this.errorMessage,
  });

  TikTokLoginStatus status;

  String? authCode;

  String? state;

  String? codeVerifier;

  List<Permission?> grantedPermissions;

  String? errorCode;

  String? errorMessage;

  Object encode() {
    return <Object?>[
      status.index,
      authCode,
      state,
      codeVerifier,
      grantedPermissions,
      errorCode,
      errorMessage,
    ];
  }

  static TikTokLoginResult decode(Object result) {
    result as List<Object?>;
    return TikTokLoginResult(
      status: TikTokLoginStatus.values[result[0]! as int],
      authCode: result[1] as String?,
      state: result[2] as String?,
      codeVerifier: result[3] as String?,
      grantedPermissions: (result[4] as List<Object?>?)!.cast<Permission?>(),
      errorCode: result[5] as String?,
      errorMessage: result[6] as String?,
    );
  }
}

class _ExampleHostApiCodec extends StandardMessageCodec {
  const _ExampleHostApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is MessageData) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128: 
        return MessageData.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class ExampleHostApi {
  /// Constructor for [ExampleHostApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  ExampleHostApi({BinaryMessenger? binaryMessenger})
      : _binaryMessenger = binaryMessenger;
  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = _ExampleHostApiCodec();

  Future<String> getHostLanguage() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.instagram_connect.ExampleHostApi.getHostLanguage', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as String?)!;
    }
  }

  Future<int> add(int arg_a, int arg_b) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.instagram_connect.ExampleHostApi.add', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_a, arg_b]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as int?)!;
    }
  }

  Future<bool> sendMessage(MessageData arg_message) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.instagram_connect.ExampleHostApi.sendMessage', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_message]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as bool?)!;
    }
  }
}

class _TiktokSDKApiCodec extends StandardMessageCodec {
  const _TiktokSDKApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is Permission) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is TikTokLoginResult) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128: 
        return Permission.decode(readValue(buffer)!);
      case 129: 
        return TikTokLoginResult.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class TiktokSDKApi {
  /// Constructor for [TiktokSDKApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  TiktokSDKApi({BinaryMessenger? binaryMessenger})
      : _binaryMessenger = binaryMessenger;
  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = _TiktokSDKApiCodec();

  Future<void> setup(String arg_clientKey) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.instagram_connect.TiktokSDKApi.setup', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_clientKey]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<TikTokLoginResult> login(List<TikTokPermissionType?> arg_permissions, String arg_redirectUri, bool? arg_browserAuthEnabled) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.instagram_connect.TiktokSDKApi.login', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_permissions, arg_redirectUri, arg_browserAuthEnabled]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as TikTokLoginResult?)!;
    }
  }
}
