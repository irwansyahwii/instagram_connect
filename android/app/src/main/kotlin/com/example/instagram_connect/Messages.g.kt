// Autogenerated from Pigeon (v13.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.example.instagram_connect;

import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer

private fun wrapResult(result: Any?): List<Any?> {
  return listOf(result)
}

private fun wrapError(exception: Throwable): List<Any?> {
  if (exception is FlutterError) {
    return listOf(
      exception.code,
      exception.message,
      exception.details
    )
  } else {
    return listOf(
      exception.javaClass.simpleName,
      exception.toString(),
      "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
    )
  }
}

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class FlutterError (
  val code: String,
  override val message: String? = null,
  val details: Any? = null
) : Throwable()

enum class Code(val raw: Int) {
  ONE(0),
  TWO(1);

  companion object {
    fun ofRaw(raw: Int): Code? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class TikTokLoginStatus(val raw: Int) {
  SUCCESS(0),
  CANCELLED(1),
  ERROR(2);

  companion object {
    fun ofRaw(raw: Int): TikTokLoginStatus? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

/** https://developers.tiktok.com/doc/tiktok-api-scopes/ */
enum class TikTokPermissionType(val raw: Int) {
  /** Access to public commercial data for research purposes */
  RESEARCHADLIBBASIC(0),
  /** Access to TikTok public data for research purposes */
  RESEARCHDATABASIC(1),
  /** Read a user's profile info (open id, avatar, display name ...) */
  USERINFOBASIC(2),
  /** Read access to profile_web_link, profile_deep_link, bio_description, is_verified. */
  USERINFOPROFILE(3),
  /** Read access to a user's statistical data, such as likes count, follower count, following count, and video count */
  USERINFOSTATS(4),
  /** Read the user's in app communication settings (currently only DM settings are supported) */
  USERSETTINGLIST(5),
  /** Update the user's in app communication settings (currently only DM settings are supported) */
  USERSETTINGSUPDATE(6),
  /** Read a user's public videos on TikTok */
  VIDEOLIST(7),
  /** Directly post videos to a user's TikTok profile. */
  VIDEOPUBLISH(8),
  /** Share videos to the creator's account as a draft to further edit and post in TikTok. */
  VIDEOUPLOAD(9);

  companion object {
    fun ofRaw(raw: Int): TikTokPermissionType? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class MessageData (
  val name: String? = null,
  val description: String? = null,
  val code: Code,
  val data: Map<String?, String?>

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): MessageData {
      val name = list[0] as String?
      val description = list[1] as String?
      val code = Code.ofRaw(list[2] as Int)!!
      val data = list[3] as Map<String?, String?>
      return MessageData(name, description, code, data)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      name,
      description,
      code.raw,
      data,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class Permission (
  val name: String

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): Permission {
      val name = list[0] as String
      return Permission(name)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      name,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class TikTokLoginResult (
  val status: TikTokLoginStatus,
  val authCode: String? = null,
  val state: String? = null,
  val codeVerifier: String? = null,
  val grantedPermissions: List<Permission?>,
  val errorCode: String? = null,
  val errorMessage: String? = null,
  val scopeName: String

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): TikTokLoginResult {
      val status = TikTokLoginStatus.ofRaw(list[0] as Int)!!
      val authCode = list[1] as String?
      val state = list[2] as String?
      val codeVerifier = list[3] as String?
      val grantedPermissions = list[4] as List<Permission?>
      val errorCode = list[5] as String?
      val errorMessage = list[6] as String?
      val scopeName = list[7] as String
      return TikTokLoginResult(status, authCode, state, codeVerifier, grantedPermissions, errorCode, errorMessage, scopeName)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      status.raw,
      authCode,
      state,
      codeVerifier,
      grantedPermissions,
      errorCode,
      errorMessage,
      scopeName,
    )
  }
}

@Suppress("UNCHECKED_CAST")
private object ExampleHostApiCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      128.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          MessageData.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is MessageData -> {
        stream.write(128)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}

/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface ExampleHostApi {
  fun getHostLanguage(): String
  fun add(a: Long, b: Long): Long
  fun sendMessage(message: MessageData, callback: (Result<Boolean>) -> Unit)

  companion object {
    /** The codec used by ExampleHostApi. */
    val codec: MessageCodec<Any?> by lazy {
      ExampleHostApiCodec
    }
    /** Sets up an instance of `ExampleHostApi` to handle messages through the `binaryMessenger`. */
    @Suppress("UNCHECKED_CAST")
    fun setUp(binaryMessenger: BinaryMessenger, api: ExampleHostApi?) {
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.instagram_connect.ExampleHostApi.getHostLanguage", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.getHostLanguage())
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.instagram_connect.ExampleHostApi.add", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val aArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            val bArg = args[1].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.add(aArg, bArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.instagram_connect.ExampleHostApi.sendMessage", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val messageArg = args[0] as MessageData
            api.sendMessage(messageArg) { result: Result<Boolean> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
@Suppress("UNCHECKED_CAST")
private object TiktokSDKApiCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      128.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          Permission.fromList(it)
        }
      }
      129.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          TikTokLoginResult.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is Permission -> {
        stream.write(128)
        writeValue(stream, value.toList())
      }
      is TikTokLoginResult -> {
        stream.write(129)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}

/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface TiktokSDKApi {
  fun setup(clientKey: String, callback: (Result<Unit>) -> Unit)
  fun login(permissions: List<String>, redirectUri: String, browserAuthEnabled: Boolean?, callback: (Result<TikTokLoginResult>) -> Unit)

  companion object {
    /** The codec used by TiktokSDKApi. */
    val codec: MessageCodec<Any?> by lazy {
      TiktokSDKApiCodec
    }
    /** Sets up an instance of `TiktokSDKApi` to handle messages through the `binaryMessenger`. */
    @Suppress("UNCHECKED_CAST")
    fun setUp(binaryMessenger: BinaryMessenger, api: TiktokSDKApi?) {
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.instagram_connect.TiktokSDKApi.setup", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val clientKeyArg = args[0] as String
            api.setup(clientKeyArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.instagram_connect.TiktokSDKApi.login", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val permissionsArg = args[0] as List<String>
            val redirectUriArg = args[1] as String
            val browserAuthEnabledArg = args[2] as Boolean?
            api.login(permissionsArg, redirectUriArg, browserAuthEnabledArg) { result: Result<TikTokLoginResult> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
